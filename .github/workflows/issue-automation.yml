name: Issue Management

on:
  issues:
    types: [opened, labeled, unlabeled, assigned, unassigned]
  pull_request:
    types: [opened, closed, reopened]
  workflow_dispatch:  # Manual trigger
  schedule:
    - cron: '0 0 * * *'  # Runs every day at midnight UTC

jobs:
  issue-management:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Authenticate with GitHub CLI
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token
      
      # Handle new issues (triggered by issue events)
      - name: Move new issues to Backlog
        if: github.event_name == 'issues' && github.event.action == 'opened'
        run: |
          gh api graphql -f query='
            mutation {
              addProjectV2ItemById(input: {projectId: "${{ secrets.PROJECT_ID }}" contentId: "${{ github.event.issue.node_id }}"}) {
                item {
                  id
                }
              }
            }
          '
          
          # Set to Backlog status
          gh api graphql -f query='
            mutation {
              updateProjectV2ItemFieldValue(input: {
                projectId: "${{ secrets.PROJECT_ID }}"
                itemId: "${{ github.event.issue.node_id }}"
                fieldId: "${{ secrets.STATUS_FIELD_ID }}"
                value: {
                   singleSelectOptionId: "${{ secrets.BACKLOG_OPTION_ID }}"
                }
              }) {
                projectV2Item {
                  id
                }
              }
            }
          '
      
      # Handle assigned issues (triggered by issue events)
      - name: Move assigned issues to To Do
        if: github.event_name == 'issues' && github.event.action == 'assigned'
        run: |
          # Set to To Do status
          gh api graphql -f query='
            mutation {
              updateProjectV2ItemFieldValue(input: {
                projectId: "${{ secrets.PROJECT_ID }}"
                itemId: "${{ github.event.issue.node_id }}"
                fieldId: "${{ secrets.STATUS_FIELD_ID }}"
                value: {
                   singleSelectOptionId: "${{ secrets.TODO_OPTION_ID }}"
                }
              }) {
                projectV2Item {
                  id
                }
              }
            }
          '
      
      # Handle new PRs (triggered by PR events)
      - name: Move PRs to Review
        if: github.event_name == 'pull_request' && github.event.action == 'opened'
        run: |
          gh api graphql -f query='
            mutation {
              addProjectV2ItemById(input: {projectId: "${{ secrets.PROJECT_ID }}" contentId: "${{ github.event.pull_request.node_id }}"}) {
                item {
                  id
                }
              }
            }
          '
          
          # Set to Review status
          gh api graphql -f query='
            mutation {
              updateProjectV2ItemFieldValue(input: {
                projectId: "${{ secrets.PROJECT_ID }}"
                itemId: "${{ github.event.pull_request.node_id }}"
                fieldId: "${{ secrets.STATUS_FIELD_ID }}"
                value: {
                   singleSelectOptionId: "${{ secrets.REVIEW_OPTION_ID }}"
                }
              }) {
                projectV2Item {
                  id
                }
              }
            }
          '
      
      # Handle merged PRs (triggered by PR events)
      - name: Move PRs to Done when closed
        if: github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true
        run: |
          # Set to Done status
          gh api graphql -f query='
            mutation {
              updateProjectV2ItemFieldValue(input: {
                projectId: "${{ secrets.PROJECT_ID }}"
                itemId: "${{ github.event.pull_request.node_id }}"
                fieldId: "${{ secrets.STATUS_FIELD_ID }}"
                value: {
                   singleSelectOptionId: "${{ secrets.DONE_OPTION_ID }}"
                }
              }) {
                projectV2Item {
                  id
                }
              }
            }
          '

      # Process all issues when triggered by workflow_dispatch or schedule
      - name: Process all issues and PRs on schedule or manual trigger
        if: github.event_name == 'workflow_dispatch' || github.event_name == 'schedule'
        run: |
          # Get all open issues and PRs
          echo "Processing all open issues and PRs..."
          
          # Get all open issues
          ISSUES=$(gh issue list --state open --json number,title,url,assignees,labels,id --limit 100)
          
          # Process each issue
          echo "$ISSUES" | jq -c '.[]' | while read -r issue; do
            NODE_ID=$(echo "$issue" | jq -r '.id')
            NUMBER=$(echo "$issue" | jq -r '.number')
            HAS_ASSIGNEES=$(echo "$issue" | jq '.assignees | length > 0')
            
            echo "Processing issue #$NUMBER"
            
            # First add to project if not already there
            gh api graphql -f query='
              mutation {
                addProjectV2ItemById(input: {projectId: "${{ secrets.PROJECT_ID }}" contentId: "'"$NODE_ID"'"}) {
                  item {
                    id
                  }
                }
              }
            ' || echo "Issue may already be in project"
            
            # Set status based on assignees
            if [ "$HAS_ASSIGNEES" = "true" ]; then
              # Set to To Do status for assigned issues
              echo "Issue #$NUMBER has assignees, setting to To Do"
              gh api graphql -f query='
                mutation {
                  updateProjectV2ItemFieldValue(input: {
                    projectId: "${{ secrets.PROJECT_ID }}"
                    itemId: "'"$NODE_ID"'"
                    fieldId: "${{ secrets.STATUS_FIELD_ID }}"
                    value: {
                       singleSelectOptionId: "${{ secrets.TODO_OPTION_ID }}"
                    }
                  }) {
                    projectV2Item {
                      id
                    }
                  }
                }
              '
            else
              # Set to Backlog status for unassigned issues
              echo "Issue #$NUMBER has no assignees, setting to Backlog"
              gh api graphql -f query='
                mutation {
                  updateProjectV2ItemFieldValue(input: {
                    projectId: "${{ secrets.PROJECT_ID }}"
                    itemId: "'"$NODE_ID"'"
                    fieldId: "${{ secrets.STATUS_FIELD_ID }}"
                    value: {
                       singleSelectOptionId: "${{ secrets.BACKLOG_OPTION_ID }}"
                    }
                  }) {
                    projectV2Item {
                      id
                    }
                  }
                }
              '
            fi
          done
          
          # Get all open PRs
          PRS=$(gh pr list --state open --json number,title,url,assignees,labels,id --limit 100)
          
          # Process each PR
          echo "$PRS" | jq -c '.[]' | while read -r pr; do
            NODE_ID=$(echo "$pr" | jq -r '.id')
            NUMBER=$(echo "$pr" | jq -r '.number')
            
            echo "Processing PR #$NUMBER"
            
            # First add to project if not already there
            gh api graphql -f query='
              mutation {
                addProjectV2ItemById(input: {projectId: "${{ secrets.PROJECT_ID }}" contentId: "'"$NODE_ID"'"}) {
                  item {
                    id
                  }
                }
              }
            ' || echo "PR may already be in project"
            
            # Set to Review status for open PRs
            echo "Setting PR #$NUMBER to Review"
            gh api graphql -f query='
              mutation {
                updateProjectV2ItemFieldValue(input: {
                  projectId: "${{ secrets.PROJECT_ID }}"
                  itemId: "'"$NODE_ID"'"
                  fieldId: "${{ secrets.STATUS_FIELD_ID }}"
                  value: {
                     singleSelectOptionId: "${{ secrets.REVIEW_OPTION_ID }}"
                  }
                }) {
                  projectV2Item {
                    id
                  }
                }
              }
            '
          done
          
          # Get all closed, merged PRs from last 7 days
          MERGED_PRS=$(gh pr list --state merged --json number,title,url,mergedAt,id --limit 100 --search "merged:>$(date -d '7 days ago' +'%Y-%m-%d')")
          
          # Process each merged PR
          echo "$MERGED_PRS" | jq -c '.[]' | while read -r pr; do
            NODE_ID=$(echo "$pr" | jq -r '.id')
            NUMBER=$(echo "$pr" | jq -r '.number')
            
            echo "Processing merged PR #$NUMBER"
            
            # First add to project if not already there
            gh api graphql -f query='
              mutation {
                addProjectV2ItemById(input: {projectId: "${{ secrets.PROJECT_ID }}" contentId: "'"$NODE_ID"'"}) {
                  item {
                    id
                  }
                }
              }
            ' || echo "PR may already be in project"
            
            # Set to Done status for merged PRs
            echo "Setting PR #$NUMBER to Done"
            gh api graphql -f query='
              mutation {
                updateProjectV2ItemFieldValue(input: {
                  projectId: "${{ secrets.PROJECT_ID }}"
                  itemId: "'"$NODE_ID"'"
                  fieldId: "${{ secrets.STATUS_FIELD_ID }}"
                  value: {
                     singleSelectOptionId: "${{ secrets.DONE_OPTION_ID }}"
                  }
                }) {
                  projectV2Item {
                    id
                  }
                }
              }
            '
          done
