name: Issue Management

on:
  issues:
    types: [opened, labeled, unlabeled, assigned, unassigned]
  pull_request:
    types: [opened, closed, reopened]
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * *'  # Runs every day at midnight UTC

jobs:
  issue-management:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Authenticate with GitHub CLI
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token
      
      - name: Move new issues to Backlog
        if: github.event_name == 'issues' && github.event.action == 'opened'
        run: |
          gh api graphql -f query='
            mutation {
              addProjectV2ItemById(input: {projectId: "${{ secrets.PROJECT_ID }}" contentId: "${{ github.event.issue.node_id }}"}) {
                item {
                  id
                }
              }
            }
          '
          
          # Set to Backlog status
          gh api graphql -f query='
            mutation {
              updateProjectV2ItemFieldValue(input: {
                projectId: "${{ secrets.PROJECT_ID }}"
                itemId: "${{ github.event.issue.node_id }}"
                fieldId: "${{ secrets.STATUS_FIELD_ID }}"
                value: { 
                  singleSelectOptionId: "${{ secrets.BACKLOG_OPTION_ID }}"
                }
              }) {
                projectV2Item {
                  id
                }
              }
            }
          '
      
      - name: Move assigned issues to To Do
        if: github.event_name == 'issues' && github.event.action == 'assigned'
        run: |
          # Set to To Do status
          gh api graphql -f query='
            mutation {
              updateProjectV2ItemFieldValue(input: {
                projectId: "${{ secrets.PROJECT_ID }}"
                itemId: "${{ github.event.issue.node_id }}"
                fieldId: "${{ secrets.STATUS_FIELD_ID }}"
                value: { 
                  singleSelectOptionId: "${{ secrets.TODO_OPTION_ID }}"
                }
              }) {
                projectV2Item {
                  id
                }
              }
            }
          '
      
      - name: Move PRs to Review
        if: github.event_name == 'pull_request' && github.event.action == 'opened'
        run: |
          gh api graphql -f query='
            mutation {
              addProjectV2ItemById(input: {projectId: "${{ secrets.PROJECT_ID }}" contentId: "${{ github.event.pull_request.node_id }}"}) {
                item {
                  id
                }
              }
            }
          '
          
          # Set to Review status
          gh api graphql -f query='
            mutation {
              updateProjectV2ItemFieldValue(input: {
                projectId: "${{ secrets.PROJECT_ID }}"
                itemId: "${{ github.event.pull_request.node_id }}"
                fieldId: "${{ secrets.STATUS_FIELD_ID }}"
                value: { 
                  singleSelectOptionId: "${{ secrets.REVIEW_OPTION_ID }}"
                }
              }) {
                projectV2Item {
                  id
                }
              }
            }
          '
      
      - name: Move PRs to Done when closed
        if: github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true
        run: |
          # Set to Done status
          gh api graphql -f query='
            mutation {
              updateProjectV2ItemFieldValue(input: {
                projectId: "${{ secrets.PROJECT_ID }}"
                itemId: "${{ github.event.pull_request.node_id }}"
                fieldId: "${{ secrets.STATUS_FIELD_ID }}"
                value: { 
                  singleSelectOptionId: "${{ secrets.DONE_OPTION_ID }}"
                }
              }) {
                projectV2Item {
                  id
                }
              }
            }
          '
