name: Issue Management

on:
  issues:
    types: [opened, labeled, unlabeled, assigned, unassigned]
  pull_request:
    types: [opened, closed, reopened]
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * *'  # Runs every day at midnight UTC

permissions:
  issues: write
  pull-requests: write
  repository-projects: write
  contents: read

jobs:
  issue-management:
    runs-on: ubuntu-latest
    steps:
      - name: Dump GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: echo "$GITHUB_CONTEXT"
      
      - name: Check if workflow is triggered
        run: |
          echo "Event name: ${{ github.event_name }}"
          echo "Event action: ${{ github.event.action }}"
      
      - name: Authenticate with GitHub CLI
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token
      
      - name: Get Item ID for Issue
        if: github.event_name == 'issues'
        id: get-issue-id
        run: |
          ISSUE_NODE_ID=$(gh api graphql -f query='
            query($owner:String!, $repo:String!, $issue_number:Int!) {
              repository(owner: $owner, name: $repo) {
                issue(number: $issue_number) {
                  id
                }
              }
            }' -f owner=${{ github.repository_owner }} -f repo=$(echo "${{ github.repository }}" | cut -d'/' -f2) -f issue_number=${{ github.event.issue.number }} --jq '.data.repository.issue.id')
          echo "ISSUE_NODE_ID=$ISSUE_NODE_ID" >> $GITHUB_ENV
          echo "Retrieved issue node ID: $ISSUE_NODE_ID"

      - name: Get Item ID for PR
        if: github.event_name == 'pull_request'
        id: get-pr-id
        run: |
          PR_NODE_ID=$(gh api graphql -f query='
            query($owner:String!, $repo:String!, $pr_number:Int!) {
              repository(owner: $owner, name: $repo) {
                pullRequest(number: $pr_number) {
                  id
                }
              }
            }' -f owner=${{ github.repository_owner }} -f repo=$(echo "${{ github.repository }}" | cut -d'/' -f2) -f pr_number=${{ github.event.pull_request.number }} --jq '.data.repository.pullRequest.id')
          echo "PR_NODE_ID=$PR_NODE_ID" >> $GITHUB_ENV
          echo "Retrieved PR node ID: $PR_NODE_ID"
      
      - name: Move new issues to Backlog
        if: github.event_name == 'issues' && github.event.action == 'opened'
        run: |
          echo "Adding issue to project..."
          RESPONSE=$(gh api graphql -f query='
            mutation($project:ID!, $content:ID!) {
              addProjectV2ItemById(input: {projectId: $project contentId: $content}) {
                item {
                  id
                }
              }
            }' -f project="${{ secrets.PROJECT_ID }}" -f content="$ISSUE_NODE_ID")
          echo "Response: $RESPONSE"
          
          ITEM_ID=$(echo $RESPONSE | jq -r '.data.addProjectV2ItemById.item.id')
          echo "Item ID: $ITEM_ID"
          
          # Set to Backlog status
          echo "Setting status to Backlog..."
          gh api graphql -f query='
            mutation($project:ID!, $item:ID!, $field:ID!, $value:String!) {
              updateProjectV2ItemFieldValue(input: {
                projectId: $project
                itemId: $item
                fieldId: $field
                value: { 
                  singleSelectOptionId: $value
                }
              }) {
                projectV2Item {
                  id
                }
              }
            }' -f project="${{ secrets.PROJECT_ID }}" -f item="$ITEM_ID" -f field="${{ secrets.STATUS_FIELD_ID }}" -f value="${{ secrets.BACKLOG_OPTION_ID }}"
      
      - name: Move assigned issues to To Do
        if: github.event_name == 'issues' && github.event.action == 'assigned'
        run: |
          echo "Getting item ID for the issue in the project..."
          
          # First we need to get the project item ID (different from the issue node ID)
          ITEM_ID=$(gh api graphql -f query='
            query($project:ID!, $content:ID!) {
              projectV2(id: $project) {
                items(first: 1, filter: {contentIds: [$content]}) {
                  nodes {
                    id
                  }
                }
              }
            }' -f project="${{ secrets.PROJECT_ID }}" -f content="$ISSUE_NODE_ID" --jq '.data.projectV2.items.nodes[0].id')
          
          echo "Project Item ID: $ITEM_ID"
          
          # Set to To Do status
          echo "Setting status to To Do..."
          gh api graphql -f query='
            mutation($project:ID!, $item:ID!, $field:ID!, $value:String!) {
              updateProjectV2ItemFieldValue(input: {
                projectId: $project
                itemId: $item
                fieldId: $field
                value: { 
                  singleSelectOptionId: $value
                }
              }) {
                projectV2Item {
                  id
                }
              }
            }' -f project="${{ secrets.PROJECT_ID }}" -f item="$ITEM_ID" -f field="${{ secrets.STATUS_FIELD_ID }}" -f value="${{ secrets.TODO_OPTION_ID }}"
      
      - name: Move PRs to Review
        if: github.event_name == 'pull_request' && github.event.action == 'opened'
        run: |
          echo "Adding PR to project..."
          RESPONSE=$(gh api graphql -f query='
            mutation($project:ID!, $content:ID!) {
              addProjectV2ItemById(input: {projectId: $project contentId: $content}) {
                item {
                  id
                }
              }
            }' -f project="${{ secrets.PROJECT_ID }}" -f content="$PR_NODE_ID")
          
          ITEM_ID=$(echo $RESPONSE | jq -r '.data.addProjectV2ItemById.item.id')
          echo "Item ID: $ITEM_ID"
          
          # Set to Review status
          echo "Setting status to Review..."
          gh api graphql -f query='
            mutation($project:ID!, $item:ID!, $field:ID!, $value:String!) {
              updateProjectV2ItemFieldValue(input: {
                projectId: $project
                itemId: $item
                fieldId: $field
                value: { 
                  singleSelectOptionId: $value
                }
              }) {
                projectV2Item {
                  id
                }
              }
            }' -f project="${{ secrets.PROJECT_ID }}" -f item="$ITEM_ID" -f field="${{ secrets.STATUS_FIELD_ID }}" -f value="${{ secrets.REVIEW_OPTION_ID }}"
      
      - name: Move PRs to Done when closed
        if: github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true
        run: |
          echo "Getting item ID for the PR in the project..."
          
          # First we need to get the project item ID (different from the PR node ID)
          ITEM_ID=$(gh api graphql -f query='
            query($project:ID!, $content:ID!) {
              projectV2(id: $project) {
                items(first: 1, filter: {contentIds: [$content]}) {
                  nodes {
                    id
                  }
                }
              }
            }' -f project="${{ secrets.PROJECT_ID }}" -f content="$PR_NODE_ID" --jq '.data.projectV2.items.nodes[0].id')
          
          echo "Project Item ID: $ITEM_ID"
          
          # Set to Done status
          echo "Setting status to Done..."
          gh api graphql -f query='
            mutation($project:ID!, $item:ID!, $field:ID!, $value:String!) {
              updateProjectV2ItemFieldValue(input: {
                projectId: $project
                itemId: $item
                fieldId: $field
                value: { 
                  singleSelectOptionId: $value
                }
              }) {
                projectV2Item {
                  id
                }
              }
            }' -f project="${{ secrets.PROJECT_ID }}" -f item="$ITEM_ID" -f field="${{ secrets.STATUS_FIELD_ID }}" -f value="${{ secrets.DONE_OPTION_ID }}"
